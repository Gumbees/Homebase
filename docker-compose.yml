services:
  web:
    build: .
    ports:
      - "5000:5000"
    env_file:
      - stack.env
    environment:
      - PYTHONUNBUFFERED=1
      - GUNICORN_TIMEOUT=300
    depends_on:
      db:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    volumes:
      - .:/app
    command: >
      bash -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        gunicorn --bind 0.0.0.0:5000 --workers 4 --threads 2 --timeout 300 'app:app'
      "
    restart: unless-stopped

  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - stack.env
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_PORT=8080
    volumes:
      - ./mcp-server:/app
      - ./prompts:/app/prompts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=homebase
      - POSTGRES_PASSWORD=homebase
      - POSTGRES_DB=homebase
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U homebase"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local